openapi: 3.0.0
info:
  version: 1.0.0
  title: Vaccination API
  description: This doc describe all the features and api-end points of vaccination app
  contact:
    name: Dev
    email: dev@dev.com
    url: 'https://dev.com'
  license:
    name: Apache 2.0
    url: 'https://www.apache.org/licenses/LICENSE-2.0.html'
servers:
  - description: Dev
    url: 'http://localhost:8000/api/v1'
  - description: SwaggerHub API Auto Mocking
    url: 
      https://virtserver.swaggerhub.com/Learning-SwaggerAPI/Vaccination-API/1.0.0
tags:
  - name: Availability
    description: Available Date Endpoints
  - name: Auth
    description: Authentication Endpoints
  - name: Appointments
    description: Appointment Endpoint
  - name: Users
    description: User Profile Endpoints
  - name: Reviews
    description: Review Endpoints
  - name: Admin
    description: Admin Endpoints
  - name: Doctor
    description: Doctor Endpoints
paths:
  '/auth/register':
    post:
      description: create a new account
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Fname Lname
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: PassWord111#
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: A verification email sent to you inbox 
          content:
            application/json:
              schema:
                type: object
                properties:
                  # code:
                  #   type: integer
                  #   format: int32
                  #   example: 201
                  message:
                    type: string
                    example: Please check your mail inbox to complete the verification
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: api/v1/auth/register
                      signin:
                        type: string
                        example: api/v1/auth/login
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
        '409':
          $ref: '#/components/responses/409'  
  '/auth/verify/{token}':
    get:
      description: Verify email address
      tags:
        - Auth
      parameters:
        - $ref: '#/components/parameters/tokenParam'
      responses:
        '200':
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email verification successful
        '400':
          description: Not Found!
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Resource not found
        '404':  
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/auth/login':
    post:
      description: Login to your account
      tags:
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: dev.souravsaha@gmail.com
                password:
                  type: string
                  format: password
                  example: Test@123
              required:
                - email
                - password
      responses:
        '200':
          description: Signin successul
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Signin successful
                  data:
                    type: object
                    properties:
                      id: 
                        type: string
                        example: 653c9da6e14c7b707ff456ed
                      name: 
                        type: string
                        example: Fname Lname
                      role: 
                        type: string
                        example: user
                      email: 
                        type: string
                        example: user@example.com   
                      token:
                        type: object
                        properties:
                            access_token:
                             type: string
                             example: >-
                               eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                            refresh_token:
                             type: string
                             example: >-
                               eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c   
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /api/v1/auth/login
                      appoinments:
                        example: /api/v1/appointments 
        '400':
          $ref: '#/components/responses/400'
        '401':  
           description: Invalid credentials
           content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid credentials
        '404':  
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/auth/refresh':
    post:
      description: Get auth token
      tags: 
        - Auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  example: 6524fe9dea75f922eba95436
                refreshToken:
                  type: string
                  format: token
                  example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY1MjRmZjI1ZWE3NWY5MjJlYmE5NTQzZCIsInVzZXIiOiI2NTI0ZmU5ZGVhNzVmOTIyZWJhOTU0MzYiLCJuYW1lIjoiVGVzdHVzZXIiLCJlbWFpbCI6InBvbWFpa2FpMzUxQHJhcGlkbHl3cy5jb20iLCJyb2xlIjoidXNlciIsImlhdCI6MTY5NjkyMzQyOSwiZXhwIjoxNjk5NTE1NDI5fQ.naneEtvp76IjSFn5wBG9pel879CvNyc3gzU_zEwkVqQ
              required:
                - id
                - token
      responses:
        '200':
          description: Signin successul
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Signin successful
                  data:
                    type: object
                    properties:
                      id: 
                        type: string
                        example: 653c9da6e14c7b707ff456ed
                      name: 
                        type: string
                        example: Fname Lname
                      role: 
                        type: string
                        example: user
                      email: 
                        type: string
                        example: user@example.com   
                      token:
                        type: object
                        properties:
                            access_token:
                             type: string
                             example: >-
                               eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c
                            refresh_token:
                             type: string
                             example: >-
                               eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c   
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /api/v1/auth/refresh
                      appoinments:
                        example: /api/v1/appointments 
        '400':
          $ref: '#/components/responses/400'
        '401':  
           description: Invalid credentials
           content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid credentials
        '404':  
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'          
  '/auth/logout':
    post:
      operationId: Logout
      security:
        - bearerAuth: []
      tags:
        - Auth
      description: Logout user
      parameters:
          - in: query
            name: id
            description: logout by user id
            schema:
               type: string
               example: 6524fe9dea75f922eba95436
      responses:
        '204':
          description: 'Logout successful'
        '401':
          $ref: '#/components/responses/401'
        '500':
            $ref: '#/components/responses/500'         
  '/availability':
    get:
      tags:
        - Availability
      description: Retrive all available appointment dates
      responses:
        '200':
          description: Return a list of available dates for appointment
          content:
            application/json:
              schema:
                type: object
                properties:
                  # code:
                  #   type: integer
                  #   example: 200
                  message:
                    type: string
                    example: Available slots list fetched successfully
                  data:
                    type: array
                    items:
                      type: string
                    example: 
                           - '2023-09-23'
                           - '2023-09-24'
                           - '2023-09-25'
                           - '2023-09-26'
                           - '2023-09-27'
                           - '2023-09-28'
                           - '2023-09-29'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: api/v1/availability
                      login:
                        type: string
                        example: api/v1/auth/login        
                           
        '500':
          $ref: '#/components/responses/500'
  '/appointments':
    get:
      operationId: getAllAppointment
      security:
        - bearerAuth: []
      tags:
        - Appointments
      description: Retrive all appointents
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/sortTypeParam"
        - $ref: "#/components/parameters/sortByParam"
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/statusParam"
      responses:
        '200':
          description: Return a list of appointments
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Appoinemts fetched successfully
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            _id:
                              type: integer
                              format: int32
                              example: 1
                            name:
                              type: string
                              example: user
                            vacine:
                              type: string
                              enum:
                                - Covid
                                - Viral
                                - Pneumonia
                              example: Viral
                            status:
                              type: string
                              enum:
                                - pending
                                - complete
                              example: pending
                            link:
                              type: string
                              format: url
                              example: /appointments/1
                            date:
                              type: string
                              format: date
                          required:
                            - id
                            - title
                            - author
                            - appointeme-time
                        # - $ref: '#/components/schemas/Timestamp'
                  pagination: 
                      $ref: "#/components/schemas/Pagination" 
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /api/v1/appointments
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404': 
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    post:
      operationId: createAppointment
      security:
        - bearerAuth: []
      description: create a new appoinment
      tags:
        - Appointments
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vaccine:
                  type: string
                  example: viral-shot
                date:
                  type: string
                  format: date
              required:
                - vaccine
                - date
      responses:
        '201':
          description: Appointment creation successul
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Appointment Created Successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: '5#3ejhhjge'
                      name:
                        type: string
                        example: John Doe
                      vaccine:
                        type: string
                        example: viral
                      time:
                        type: string
                        format: date
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /api/v1/appoinments
                      reviews:
                        type: string
                        example: /api/v1/reviews/viral-shot
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
  '/appointments/{id}':
    get:
      operationId: getSingleAppointment
      security:
        - bearerAuth: []
      tags:
        - Appointments
      description: Retrive a single appointment
      parameters:
        - $ref: '#/components/parameters/idPathParam'
        - in: query
          name: expand
          description: expand reviews
          schema:
            type: string
            example: "user"
      responses:
        '200':
          description: Appoinment details fetched successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Appointment'
                      - type: object
                        properties:
                          reviews:
                            type: array
                            items:
                              $ref: '#/components/schemas/Reviews'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /appointments/1
                      appointments:
                        type: string
                        example: /appointments
        '400':
          $ref: '#/components/responses/400'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    patch:
      security:
        - bearerAuth: []
      tags:
        - Appointments
      description: Partially update an appointment
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                vaccine:
                  type: string
                  example: Pnemonia shot
                date:
                  type: string
                  format: date
      responses:
        '200':
          description: Successfully Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppointmentUpdateDTO'
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Appointments
      description: Delete an appointment by id
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: Appointment deleted successfully
        '401':
          $ref: '#/components/responses/401'
        '409':  
            description: Conflict, Appointment completed.
            content:
              application/json:
                schema:
                  type: object
                  properties:
                    message:
                      type: string
                      example: Completed appointment can't be deleted
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/users': 
    get:
      operationId: getAllUsers
      security:
        - bearerAuth: []
      tags:
        - Admin
      description: Retrive all users
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/sortTypeParam"
        - $ref: "#/components/parameters/sortByParam"
        - $ref: "#/components/parameters/searchParam"
        - $ref: "#/components/parameters/userStatusParam"
      responses:
        '200':
          description: Return a list of users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Users fetched successfully
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            name:
                              type: string
                              example: John Doe
                            email:
                              type: string
                              example: john123@example.com
                            role: 
                              type: string
                              enum: ['user', 'admin']
                              example: user
                            vacination:
                              type: array
                              example: ['653df91a121b180d6d201d45', '651df91a121b180d6d201d41']
                            photo:
                              type: string
                              format: url
                              example: "https://s3.aws.com/myfirstblog/124.jpg"
                            status:
                              type: string
                              enum:
                                - pending
                                - complete
                              example: pending
                            link:
                              type: string
                              format: url
                              example: /api/v1/appointments/1
                          required:
                            - id
                            - title
                            - author
                            - appointeme-time
                        - $ref: '#/components/schemas/Timestamp'
                  pagination: 
                        $ref: "#/components/schemas/Pagination"      
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /api/v1/appointments
                      review:
                        type: string
                        example: /api/v1/reviews
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403'  
        '500':
          $ref: '#/components/responses/500'
    post:
      operationId: createAnUser
      security:
          - bearerAuth: []
      description: create a new account
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Abdullah Alamin
                email:
                  type: string
                  format: email
                  example: alamin@example.com
                password:
                  type: string
                  format: password
                  example: PassWord123
              required:
                - name
                - email
                - password
      responses:
        '201':
          description: User created successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User created successful
                  data:
                    type: object
                    properties:
                      id:
                       type: string
                       example: g#dsjhdfhg
                      name: 
                        type: string
                        example: John Doe
                      email:
                        type: string
                        format: email
                        example: john@abc.com
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /api/v1/users
                      users:
                        type: string
                        example: /users
                      appoinment:  
                        type: string
                        example: /api/v1/appointments
                      vaccines: 
                        type: string
                        example: /api/v1/vaccines
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'  
        '403':
          $ref: '#/components/responses/403'  
        '500':
          $ref: '#/components/responses/500'
  '/users/profile':
    get:
      operationId: getProfileDetails
      security:
        - bearerAuth: []
      tags:
        - Users
      description: Fetch profile details
      responses:
        '200':
          description: Profile data fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile data fetched successfully
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        format: email
                        example: john@abc.com
                      photo: 
                        type: string
                        format: url
                        example: https://s3.aws.com/myfirstblog/124.jpg
                      vaccines:
                        type: string
                        enum: [Covisheild,Pnemonia,Viral]
                        example: ["Covisheild", "Pnemonia"]
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /profile
                      appointments:
                        type: string
                        example: /appoinments
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
    patch:
      operationId: updateProfileDetails
      security:
        - bearerAuth: []
      tags:
        - Users
      requestBody:
         content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Jonathon Doe
                  photo:
                    type: string
                    format: url
                    example: https://s3.aws.com/myfirstblog/134.jpg
      responses:
        '200':
          description: Profile data updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Profile data updated successfully
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Jonathon Doe
                      email:
                        type: string
                        format: email
                        example: john@abc.com
                      photo: 
                        type: string
                        format: url
                        example: https://s3.aws.com/myfirstblog/134.jpg
                      vaccination:
                        type: string
                        enum: [Covisheild,Pnemonia,Viral]
                        example: ["Covisheild", "Pnemonia"]
                      createdAt:
                        type: string
                        format: date-time
                      updatedAt:
                        type: string
                        format: date-time
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /profile
                      appointments:
                        type: string
                        example: /appoinments
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500'
  '/users/{id}':
    get: 
     operationId: getSingleUser
     security:
        - bearerAuth: []
     tags: [Doctor]
     description: Get a single user's detail
     parameters:
        - $ref: '#/components/parameters/idPathParam'
     responses:
        '200':
          description: User's data fetched successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User data fetched successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 653d0591fc9aa161781d9132
                      name:
                        type: string
                        example: John Doe
                      email:
                        type: string
                        format: email
                        example: john@abc.com
                      photo: 
                        type: string
                        format: url
                        example: https://s3.aws.com/myfirstblog/124.jpg
                      status:
                        type: string
                        format: approved
                        example: john@abc.com  
                      role: 
                        type: string
                        enum: [Admin,Docter,Paitent]
                        example: Paitent
                      vaccines: 
                        type: array
                        items:
                           $ref: '#/components/schemas/Vaccine'
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /api/v1/users/1
                      appointments:
                        type: string
                        example: /api/v1/appoinments
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    patch:
      operationId: updateUserDetails
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/idPathParam'  
      tags:
        - Doctor
      requestBody:
         content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Jonathon Doe
                  photo:
                    type: string
                    format: url
                    example: https://s3.aws.com/myfirstblog/134.jpg
                  password: 
                    type: string
                    format: password
                    example: 'password'
      responses:
        '200':
          description: User data updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User data updated successfully
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Jonathon Doe
                      email:
                        type: string
                        format: email
                        example: john@abc.com
                      role: 
                          type: string
                          enum: [admin,user]
                          example: user
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /api/v1/user/653cf88eed1cd7499cde5795
                      appointments:
                        type: string
                        example: /api/v1//appoinments
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '500':
          $ref: '#/components/responses/500' 
    delete:
      security:
        - bearerAuth: []
      tags:
        - Doctor
      description: Delete an user by id
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: User deleted successfully
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/appointments/complete/{appointmentId}':
    patch:
      operationId: updateUserVaccineStatus
      security:
        - bearerAuth: []
      tags:
        - Doctor  
      parameters:
        - $ref: '#/components/parameters/appoinmentIdPathParam'  
      responses:
         '200': 
          description: Successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Appointment completed successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 653d038f5284342d85d6a3f1
                      user:
                        type: string
                        example: 653k068f5284342d85d6a1f9
                      name:
                        type: string
                        example: John Doe
                      status:
                        type: string
                        example: complete
                      photo: 
                        type: string
                        format: date
                        example: '2023-10-29'
                      vaccines:
                        type: string
                        example: "Pnemonia"
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /api/v1/appointments/complete/4
                      appointments:
                        type: string
                        example: /api/v1/appoinments
         '400':
           $ref: '#/components/responses/400'
         '401':
           $ref: '#/components/responses/401'
         '403':
          $ref: '#/components/responses/403'   
         '500':
           $ref: '#/components/responses/500'
  '/reviews':
    get:
     operationId: getAllReviews
     security:
      - bearerAuth: []
     tags: [Reviews]
     description: Retrive all reviews
     parameters:
          - $ref: "#/components/parameters/pageParam"
          - $ref: "#/components/parameters/limitParam"
          - $ref: "#/components/parameters/sortTypeParam"
          - $ref: "#/components/parameters/sortByParam"
          - $ref: "#/components/parameters/reviewStatusParam"
          - in: query
            name: expand
            description: expand user appoinment object
            schema:
              type: string
              example: "user,appointment"
     responses:
      "200":
          description: "Success"
          content:
            "application/json":
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Reviews fetched successfully"
                  data:
                    type: array
                    items:
                      $ref: "#/components/schemas/Reviews"
                  pagination:
                      $ref: "#/components/schemas/Pagination"
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "api/v1/reviews?page=2&limit=10&sort_type=dsc&sort_by=createdAt&status=pending&expands=user,rappointment"
                      next:
                        type: string
                        format: url
                        example: "api/v1/reviews?page=3&limit=10&sort_type=dsc&sort_by=createdAt&status=pending&expands=user,rappointment"
                      prev:
                        type: string
                        format: url
                        example: "api/v1/reviews?page=1&limit=10&sort_type=dsc&sort_by=createdAt&status=pending&expands=user,rappointment"
                      appointments:
                        type: string
                        example: "/appointments"
      '400':
        $ref: '#/components/responses/400'
      '401':
        $ref: '#/components/responses/401'  
      '500':
        $ref: '#/components/responses/500' 
    post:   
      operationId: postReview
      security:
        - bearerAuth: []
      description: Give a review
      tags: [Reviews]
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  example: 'Sample review text'
                appointmentId:
                  type: string
                  example: '123#'
              required: [body,appointmentId]
      responses:
        "201":
         description: Review posted successully
         content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example:  Review Created successfully
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            type: integer
                            format: int32
                            example: 1
                          user:
                            type: string
                            format: int32
                            example: John Doe
                          appoinmentId:
                            type: string
                            example: Viral
                          comment:
                            type: string
                            format: text
                            example: The body of the comment
                          status:
                            type: string
                            enum:
                              - public
                              - private
                            example: public
                        required:
                          - id
                          - userId
                          - vaccineId
                          - body
                          - status
                      - $ref: '#/components/schemas/Timestamp'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/api/v1/reviews"
                      appoinments: 
                        type: string
                        format: url
                        example: "/api/v1/rappointments"
        '401':
           $ref: '#/components/responses/401'
        '400':
           $ref: '#/components/responses/400'
        '500':
           $ref: '#/components/responses/500' 
  '/reviews/{id}':
    patch:
      security:
        - bearerAuth: []
      tags:
        - Reviews
      description: Partially update an review
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                body:
                  type: string
                  example: Updated review 1
                status:
                  type: string
                  enum: [Active, Pending, Declined]
                  example: Pending
      responses:
        "200":
         description: Review updated successully
         content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example:  Review updated successully
                  data:
                    allOf:
                      - type: object
                        properties:
                          id:
                            type: integer
                            format: int32
                            example: 1
                          user:
                            type: string
                            format: int32
                            example: John Doe
                          appoinmentId:
                            type: string
                            example: Viral
                          comment:
                            type: string
                            format: text
                            example: The body of the comment
                          status:
                            type: string
                            enum:
                              - public
                              - private
                            example: public
                        required:
                          - id
                          - userId
                          - vaccineId
                          - body
                          - status
                      - $ref: '#/components/schemas/Timestamp'
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        format: url
                        example: "/api/v1/reviews/1"
                      appoinments: 
                        type: string
                        format: url
                        example: "/api/v1/rappointments"
        '400':
          $ref: '#/components/responses/400'
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
    delete:
      security:
        - bearerAuth: []
      tags:
        - Reviews
      description: Delete an review by id
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '204':
          description: Review deleted successfully
        '401':
          $ref: '#/components/responses/401'
        '404':
          $ref: '#/components/responses/404'
        '500':
          $ref: '#/components/responses/500'
  '/vaccines':
    get:
      operationId: getAllVaccines
      security:
        - bearerAuth: []
      tags:
        - Admin
      description: Retrive all vaccine
      parameters:
        - $ref: "#/components/parameters/pageParam"
        - $ref: "#/components/parameters/limitParam"
        - $ref: "#/components/parameters/sortTypeParam"
        - $ref: "#/components/parameters/sortByParam"
        - $ref: "#/components/parameters/vaccineParam"
        - $ref: "#/components/parameters/vaccineStatusParam"
      responses:
        '200':
          description: Return a list of vaccine
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Vaccins fetched successfully
                  data:
                    type: array
                    items:
                      allOf:
                        - type: object
                          properties:
                            id:
                              type: integer
                              format: int32
                              example: 1
                            name:
                              type: string
                              example: Covid
                            createdAt:
                              type: string
                              format: date
                            updatedAt:
                              type: string
                              format: date  
                            link:
                              type: string
                              format: url
                              example: /vaccine/1
                          required:
                            - id
                            - name
                            - createdAt
                        - $ref: '#/components/schemas/Timestamp'
                  pagination: 
                        $ref: "#/components/schemas/Pagination"       
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /vaccins
                      review:
                        type: string
                        example: /reviews
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
    post:
      operationId: addVaccine
      security: 
        - bearerAuth: []
      description: create a new account
      tags:
        - Admin
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  enum: ['Pneumonia', 'Covid', 'Viral']
                  example: 'Pneumonia'
              required:
                - name
      responses:
        '201':
          description: Vaccine added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example:  Vaccine added successfully
                  data:
                    type: object
                    properties:
                      id:
                       type: string
                       format: uuid
                       example: sdfghjklwure0329u
                      name: 
                        type: string
                        enum: ['Pneumonia', 'Covid', 'Viral']
                        example: Pneumonia
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /vaccins
                      users:
                        type: string
                        example: /users
                      reviews: 
                        type: string
                        example: /reviews
        '400':
          $ref: '#/components/responses/400'
        '500':
          $ref: '#/components/responses/500'
        '401':
          $ref: '#/components/responses/401'
        '403':
          $ref: '#/components/responses/403' 
  '/change_admin/{id}':
   patch:
      operationId: changeAdmin
      security:
        - bearerAuth: []
      tags:
        - Admin
      description: Change Admin 
      parameters:
        - $ref: '#/components/parameters/idPathParam'
      responses:
        '200':
          description: Admin updated successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Admin updated successfully
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: Jonathon Doe
                      email:
                        type: string
                        format: email
                        example: john@abc.com
                      role: 
                          type: string
                          enum: [Admin,Docter,Paitent]
                          example: Admin 
                      createdAt:
                        type: string
                        format: date
                      updatedAt:
                        type: string
                        format: date
                  links:
                    type: object
                    properties:
                      self:
                        type: string
                        example: /api/v1/change_admin/653d01a9b0f5338dbd35b06d
                      logout:
                        type: string
                        example: /api/v1/auth/logout
        '400':
          $ref: '#/components/responses/400' 
        '401':
          $ref: '#/components/responses/401' 
        '403':
          $ref: '#/components/responses/403'  
        '500':
          $ref: '#/components/responses/500' 

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Appointment:
      allOf:
        - type: object
          properties:
            id:
              type: string
              example: 1
            user:
              type: string
              example: 1
            name: 
              type: string
              example: user
            vaccine:
              type: string
              example: Covisheild
            status:
              type: string
              enum:
                - Complete
                - Pending
              example: Complete
            date:
              format: date
          required:
            - id
            - vaccine
            - appintment_at
        - $ref: '#/components/schemas/Timestamp'
    AppointmentCreateDTO:
      type: object
      properties:
        # code:
        #   type: integer
        #   format: int32
        #   example: 201
        message:
          type: string
          example: Appointment created successfully
        data:
          $ref: '#/components/schemas/Appointment'
        links:
          type: object
          properties:
            self:
              type: string
              format: url
              example: /appointments/1
            author:
              type: string
              format: url
              example: /appointments/1/author
            review:
              type: string
              format: url
              example: /appointments/1/review
    AppointmentUpdateDTO:
      type: object
      properties:
        message:
          type: string
          example: Appointment updated successfully
        data:
          $ref: '#/components/schemas/Appointment'
        links:
          type: object
          properties:
            self:
              type: string
              example: /appointments/1
            appoinments:
              type: string
              example: /appointments
    Reviews:
      allOf:
        - type: object
          properties:
            id:
              type: integer
              format: int32
              example: 1
            userName:
              type: string
              format: int32
              example: John Doe
            vaccine:
              type: string
              example: Viral
            comment:
              type: string
              format: text
              example: The body of the comment
            status:
              type: string
              enum:
                - public
                - private
              example: public
          required:
            - id
            - userId
            - vaccineId
            - body
            - status
        - $ref: '#/components/schemas/Timestamp'
    Timestamp:
      type: object
      properties:
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - createdAt
        - updatedAt
    AuthorDTO:
      type: object
      properties:
        id:
          type: integer
          format: int32
          example: 1
        name:
          type: string
          example: A.B Raihan
      required:
        - id
        - name
    Pagination:
      type: object
      properties:
        page:
          type: integer
          format: int32
          example: 2
        limit:
          type: integer
          format: int32
          example: 10
        next:
          type: integer
          format: int32
          example: 3
        prev:
          type: integer
          format: int32
          example: 1
        totalPage:
          type: integer
          format: int32
          example: 5
        totalItems:
          type: integer
          format: int32
          example: 50
      required:
        - page
        - limit
        - totalPage
        - totalItems
    Vaccine:
      type: object
      properties:
        _id:
          type: string
          format: uuid
        name:
          type: string
        appointment:
          type: string
          format: uuid
      required:
        - _id
        - name
        - appointment
  responses:
    '400':
      description: Bad Request
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Bad Request
              errors:
                type: array
                items:
                  type: object
                  properties:
                    field:
                      type: string
                      example: parameter
                    message:
                      type: string
                      example: Invalid parameter
    '401':
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Unauthorized
    '403':
      description: Forbidden
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Forbidden
    '404':
      description: Resource Not Found
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Requested resource not found
    '500':
      description: Internal Server Error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: Internal Server Error
    '409':
      description: Conflict, User already exists
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: User already exists           
  parameters:
    pageParam:
      in: query
      name: page
      description: current page number
      schema:
        type: integer
        format: int32
        example: 2
    limitParam:
      in: query
      name: limit
      description: maximum items to be returned
      schema:
        type: integer
        format: int32
        example: 10
    sortTypeParam:
      in: query
      name: sort_type
      description: type of sort (asc or dsc)
      schema:
        type: string
        enum:
          - asc
          - dsc
        example: dsc
    sortByParam:
      in: query
      name: sort_by
      description: Sort key
      schema:
        type: string
        example: createdAt
    searchParam:
      in: query
      name: search
      description: Search term
      schema:
        type: string
        example: sourav
    statusParam:
      in: query
      name: status
      description: Filter status
      schema:
        type: string
        enum:
          - complete
          - pending
        example: pending     
    userStatusParam:
      in: query
      name: status
      description: Filter status
      schema:
        type: string
        enum:
          - approved
          - pending
          - blocked
        example: pending 
    vaccineParam:
      in: query
      name: name
      description: Filter by vaccine name
      schema:
        type: string
        enum:
          - Covid
          - Pneumonia
          - Viral
        example: Covid 
    vaccineStatusParam:
        in: query
        name: status
        description: Filter by vaccine status
        schema:
          type: string
          enum:
            - used
            - available
          example: available 
    reviewStatusParam:
      in: query
      name: status
      description: Filter status
      schema:
        type: string
        enum:
          - approved
          - pending
          - rejected
        example: pending 
    idQueryParam:
      in: query
      name: appointment
      description: item identifier
      schema:
        type: string
        example: 1
    idPathParam:
      in: path
      name: id
      required: true
      description: item Id
      schema:
        type: string
        example: 1
    tokenParam:
      in: path
      name: token
      required: true
      description: token
      schema:
        type: string
        example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c  
    appoinmentIdPathParam:
      in: path
      name: appointmentId
      required: true
      description: appointment Id
      schema:
        type: string
        example: 1
#important formats
# date-time 
# int32
